#!/usr/bin/env node
import dotenv from "dotenv";
import { server as WebSocketServer } from "websocket";
import http from "http";
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import myntra from "../scrapers/myntra.js";
import nykaa from "../scrapers/nykaa.js";
// Load environment variables
dotenv.config();

// Resolve __dirname in ESM
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const PORT = process.env.PORT || 3000;
const BUILD_DIR = path.join(__dirname, "../dist");

// Serve static files (React build)
function serveFile(filePath, contentType, res) {
  fs.readFile(filePath, (err, content) => {
    if (err) {
      res.writeHead(500);
      res.end("Server Error");
    } else {
      res.writeHead(200, { "Content-Type": contentType });
      res.end(content);
    }
  });
}

// MIME types map
const mimeTypes = {
  ".html": "text/html",
  ".js": "application/javascript",
  ".css": "text/css",
  ".json": "application/json",
  ".png": "image/png",
  ".jpg": "image/jpeg",
  ".svg": "image/svg+xml",
  ".ico": "image/x-icon",
};

// Create HTTP + WebSocket server
const server = http.createServer((req, res) => {
  console.log("Received request for " + req.url);
  const reqPath = req.url === "/" ? "/index.html" : req.url;
  const ext = path.extname(reqPath);
  const filePath = path.join(BUILD_DIR, reqPath);
  const contentType = mimeTypes[ext] || "application/octet-stream";

  fs.exists(filePath, (exists) => {
    if (exists) {
      serveFile(filePath, contentType, res);
    } else {
      // Fallback to index.html for React Router SPA
      serveFile(path.join(BUILD_DIR, "index.html"), "text/html", res);
    }
  });
});

server.listen(PORT, () => {
  console.log("Server is listening on port " + PORT);
});

// Set up WebSocket
const wsServer = new WebSocketServer({
  httpServer: server,
  autoAcceptConnections: false,
});

wsServer.on("request", (request) => {
  const connection = request.accept("echo-protocol", request.origin);
  console.log("WebSocket connection accepted.");

  connection.on("message", (message) => {
    if (message.type === "utf8") {
      const { utf8Data } = message;
      const { app, query, location } = JSON.parse(utf8Data) || {};
      if (app && query && location) {
        console.log({ app, query, location });
        if (app === "Myntra") {
          myntra(query, location, connection);
        } else if (app === "Nykaa") {
          nykaa(query, location, connection);
        }
      }
    }
  });

  connection.on("close", (reasonCode, description) => {
    console.log("WebSocket peer " + connection.remoteAddress + " disconnected.");
  });
});
